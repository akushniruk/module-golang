package orderbook

import (
	"fmt"
	"sort"
)

type Orderbook struct {
	Bids []*Order
	Asks []*Order
}

func New() *Orderbook {
	orderbook := &Orderbook{}
	orderbook.Bids = []*Order{}
	orderbook.Asks = []*Order{}
	return orderbook
}

func (orderbook *Orderbook) Match(order *Order) ([]*Trade, *Order) {
	switch order.Side {
	case SideAsk:
		return orderbook.TradeAsks(order)
	case SideBid:
		return orderbook.TradeBids(order)
	}

	return nil, nil
}

func (orderbook *Orderbook) check(Add []*Order) bool {
	for i := 0; i < len(Add); i++ {
		if orderbook.Asks[i] == Add[i] {
			return true
		}
	}
	return false
}

func (orderbook *Orderbook) Sort(order *Order, Add []*Order) int {
	if orderbook.check(Add) {
		return sort.Search(len(Add), func(i int) bool { return Add[i].Price < order.Price })
	} else {
		return sort.Search(len(Add), func(i int) bool { return Add[i].Price > order.Price })
	}
}

func (orderbook *Orderbook) AddTo(order *Order, Add *[]*Order) {
	//	index := sort.Search(len(Add), func(i int) bool { return Add[i].Price < order.Price })
	index := orderbook.Sort(order, Add)
	Add = append(Add, order)
	copy(Add[index+1:], Add[index:])
	Add[index] = order
	fmt.Println("INSIDE ADDTO:", *Add)
}

func (orderbook *Orderbook) TradeAsks(order *Order) ([]*Trade, *Order) {
	trades := []*Trade{}

	for i := 0; i < len(orderbook.Asks); i++ {
		a := orderbook.Asks[i]
		if order.Price <= a.Price {
			if a.Volume <= order.Volume {
				trades = append(trades, &Trade{Bid: order, Ask: a, Volume: a.Volume, Price: a.Price})
				order.Volume -= a.Volume
				a.Volume = 0
				orderbook.Asks = append(orderbook.Asks[:i], orderbook.Asks[i+1:]...)
				i--
			} else {
				trades = append(trades, &Trade{Bid: order, Ask: a, Volume: order.Volume, Price: a.Price})
				a.Volume -= order.Volume
				order.Volume = 0
				return trades, nil
			}
		} else {
			break
		}
	}

	if order.Kind == 1 {
		return trades, order
	} else {
		orderbook.AddTo(order, &orderbook.Bids)
		fmt.Println("BIDS:", orderbook.Bids)
	}
	return trades, nil

}

func (orderbook *Orderbook) TradeBids(order *Order) ([]*Trade, *Order) {
	trades := []*Trade{}

	for i := 0; i < len(orderbook.Bids); i++ {
		bid := orderbook.Bids[i]
		if order.Price == 0 || bid.Price <= order.Price {
			if bid.Volume <= order.Volume {
				trades = append(trades, &Trade{Bid: bid, Ask: order, Volume: bid.Volume, Price: bid.Price})
				order.Volume -= bid.Volume
				bid.Volume = 0
				orderbook.Bids = append(orderbook.Bids[:i], orderbook.Bids[i+1:]...)
				i--
			} else {
				trades = append(trades, &Trade{Bid: bid, Ask: order, Volume: order.Volume, Price: bid.Price})
				bid.Volume -= order.Volume
				order.Volume = 0
			}
			if order.Volume == 0 {
				return trades, nil
			}
		} else {
			break
		}
	}

	if order.Kind == 1 {
		return trades, order
	} else {
		orderbook.AddTo(order, &orderbook.Asks)
		fmt.Println("ASKS:", orderbook.Asks)
	}
	return trades, nil
}
